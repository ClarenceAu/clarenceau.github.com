<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ClarenceAu Thnking and Coding</title><link>http://www.clarenceau.me/</link><description></description><atom:link href="http://www.clarenceau.me/feeds/all.rss.xml" rel="self"></atom:link><lastBuildDate>Sat, 21 Dec 2013 00:00:00 +0800</lastBuildDate><item><title>一周记要</title><link>http://www.clarenceau.me/pages/2013/12/21/weekly-report.html</link><description>&lt;p&gt;&lt;strong&gt;&lt;a href="http://book.douban.com/subject/3134515/"&gt;Real World Haskell&lt;/a&gt;&lt;/strong&gt;：本来是打算学习一下Scala的，但是后来发现要真正掌握好Scala的话，还是得对一些基础的概念有更好的掌握。可是找了一圈，发现能够真正把Scala涉及到的那些语言概念给讲得清楚，同时又是用Scala来讲的书基本没有。可能Scala作者写的那本&lt;a href="http://book.douban.com/subject/3338669/"&gt;Programming in Scala&lt;/a&gt;算是一本吧。但是这本书国内连个印影版都没有，电子版排版又太差，只能放弃。最后，发现RWH这本Haskell的圣经可能算是比较合适的。这周大概看了两章，主要是关于Haskell里的一些基本的类型概念。头两章还算是比较容易理解，后续要坚持看下去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://itunes.apple.com/cn/course/developing-ios-7-apps-for/id733644550"&gt;Developing iOS 7 Apps for iPhone and iPad&lt;/a&gt;&lt;/strong&gt;：这个是Stanford在iTunes U上的课程。看到iOS7，就知道这是最新的，就这个学年的课程。上周末换了RMBP，既然现在已经有一整套的水果装备了，即使工作中，暂时还不需要做无线的开发，学习一下，也是好的。在网上找了好几本相关的书，发现都没有十分好的。没有那种专门针对那些已经对编程有一定了解，需要快速入门的。据说苹果的开发者网站有，但是我还是没找到。最后突然想起以前看过iTunes U上的课程，于是重新打开iTunes U，果然还有，并且还是最新的iOS7。已经看了前几集，也跟着讲师做出了课堂的App原型。感觉这个课程还是比较深入浅出的。毕竟他的要求是已经修完的Stanford CS106,CS107的学生。这个课程的整个安排可能是比较偏向UI层面的。涉及底层的肯定是需要自己的苹果官网啃文档的。不过这正适合我这种入门的人。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://movie.douban.com/subject/20388198/"&gt;风暴&lt;/a&gt;&lt;/strong&gt;：周末看了一下这部最近的香港警匪片。不过比较可以没能看到粤语版本，后续找到粤语版本再看一遍。我认为这部电影对于香港的电影是有一定的里程碑意义的。从这部电影开始，香港电影终于跟上了节奏。正如豆瓣上的一些评论说，这部电影，绝对不会出现在90年代，甚至是2000年的头十年。因为那时候，好莱坞还没有把美国炸了个底朝天。虽然枪战这种题材在港产警匪片中也时常出现，但是像这部&lt;strong&gt;风暴&lt;/strong&gt;这样，把香港的核心地带，中环，炸了个底朝天的，应该是首次。去看这部电影，在3d效果下，看着把中环炸了个遍，当然是爽的。但是其实最近这两年，香港比较好的警匪片都离不开一个香港的主旋律：“法治”。包括上一年比较火的&lt;strong&gt;寒战&lt;/strong&gt;，以及这部&lt;strong&gt;风暴&lt;/strong&gt;，到影片的最后，想突出的，都是香港，是一个法治的社会，即使是作为执法者，甚至是执法者中的最高层，都需要奉公守法。这部片的最后，刘德华为了提无辜被害的线人的女儿报仇，违法地把已经投降的罪犯也枪杀了。在电影的最后一幕，所有一切过后，刘德华被关在牢房里录下他的口供。这正是把法治社会这个思想给点出来，即使你是杀了坏人，但是违反了法律，无论多打的功劳，都要受到惩罚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.cs.virginia.edu/kim/publicity/pldi09tutorials/memory-efficient-java-tutorial.pdf"&gt;Building Memory-efficient Java Applications&lt;/a&gt;&lt;/strong&gt;：这是一个关于Java Collection库中，各个不同的集合类相关的内存消耗。很有意思的一个ppt，对于各种集合的内存情况的分析地非常细致，我想对于以后自己写程序的时候，对于集合的选择也是很有帮助的。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ClarenceAu</dc:creator><pubDate>Sat, 21 Dec 2013 00:00:00 +0800</pubDate><guid>tag:www.clarenceau.me,2013-12-21:pages/2013/12/21/weekly-report.html</guid><category>iOS</category><category>haskell</category><category>movie</category><category>Java</category></item><item><title>数据挖掘-概念与技术 第一章笔记</title><link>http://www.clarenceau.me/pages/2013/11/16/data-mining-introduction.html</link><description>&lt;h1&gt;数据挖掘-概念与技术&lt;/h1&gt;
&lt;h2&gt;第一章 介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;数据挖掘的意义&lt;/li&gt;
&lt;li&gt;数据挖掘的定义&lt;/li&gt;
&lt;li&gt;数据挖掘各方面的介绍&lt;ol&gt;
&lt;li&gt;什么数据是可以用于数据挖掘的&lt;/li&gt;
&lt;li&gt;数据挖掘可以得到什么信息&lt;/li&gt;
&lt;li&gt;数据挖掘的技术/手段有哪些&lt;/li&gt;
&lt;li&gt;应用场景&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据挖掘当前的发展趋势&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据挖掘的意义&lt;/h3&gt;
&lt;p&gt;数据挖掘的意义就在于信息时代的到来，导致大量数据的产生，但这些大量的数据却无法转化为有效的信息，或者成为知识。因此需要有效的工具用于分析这些大量的数据。数据挖掘的意义就是找到强有效的工具和方法来分析大量数据，并且在其中找到有意义的信息。&lt;/p&gt;
&lt;h3&gt;数据挖掘的定义&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Data mining&lt;/strong&gt; is the &lt;em&gt;process&lt;/em&gt; of discovering interesting patterns and knowledge from &lt;em&gt;large&lt;/em&gt; amounts of data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据挖掘&lt;/strong&gt;就是从&lt;em&gt;大量&lt;/em&gt;数据中找到有效的模式以及知识的&lt;em&gt;方法&lt;/em&gt;。 &lt;/p&gt;
&lt;h4&gt;数据挖掘的基本步骤&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;数据清理&lt;/li&gt;
&lt;li&gt;数据整合&lt;/li&gt;
&lt;li&gt;数据筛选&lt;/li&gt;
&lt;li&gt;数据转换&lt;/li&gt;
&lt;li&gt;数据挖掘&lt;/li&gt;
&lt;li&gt;模式评估&lt;/li&gt;
&lt;li&gt;知识展现&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;可以被挖掘的数据&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;存储在关系数据库中的数据&lt;/li&gt;
&lt;li&gt;数据仓库中的数据&lt;/li&gt;
&lt;li&gt;事务数据&lt;/li&gt;
&lt;li&gt;其他各种数据，如：时间相关的交易数据等。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;可以被数据挖掘发现的模式&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Class/Concept Description&lt;/strong&gt;
类型/概念的描述&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Data characterization&lt;/em&gt;
数据特征
一组特定的数据的特征或者是特性&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Data discrimination&lt;/em&gt;
数据区分
把一组数据的一般特征与另外一组或多组的数据的特征进行比较，找出其中的区别&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Frequent Pattern: Associasion and Correlation&lt;/strong&gt;
频繁模式：关联与相关&lt;/p&gt;
&lt;p&gt;频繁模式就是指在一批数据中经常出现的一些数据模式，例如&lt;em&gt;频繁物品集合&lt;/em&gt;、&lt;em&gt;频繁序列&lt;/em&gt;、&lt;em&gt;频繁结构&lt;/em&gt;。&lt;strong&gt;频繁物品集合&lt;/strong&gt; 就是指那些在大量的事务数据中通常会出现在一起的物品，例如牛奶和面包，通常都会在商店中被一起购买。&lt;strong&gt;频繁序列&lt;/strong&gt; 就是指在数据中，常常以相似的顺序出现的，例如，通常人们会先买一个笔记本电脑，然后再买一台数码相机，之后会再买一张SD卡。&lt;strong&gt;频繁结构&lt;/strong&gt; 就是指那些频繁由相似的&lt;em&gt;频繁序列&lt;/em&gt;和&lt;em&gt;频繁物品集合&lt;/em&gt;组合成的结构。&lt;/p&gt;
&lt;p&gt;通过对数据中的频繁模式进行数据挖掘，我们就可以得到数据中数据的关联性与相关性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Classification and Regression for Predictive Analysis&lt;/strong&gt;
用于预测分析的分类与回归&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分类分析&lt;/strong&gt; 通常用于在数据中找到一个&lt;em&gt;模型&lt;/em&gt;来描述一个特定的物品类型的特征。可以事先用一个训练数据集合来得到这个模型。分类分析的方法有很多：&lt;em&gt;决策树&lt;/em&gt;、&lt;em&gt;规则引擎&lt;/em&gt;、&lt;em&gt;神经网络&lt;/em&gt;、&lt;em&gt;平凡贝叶斯&lt;/em&gt;、&lt;em&gt;k-NN&lt;/em&gt;以及&lt;em&gt;支持向量机(SVM)&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回归分析&lt;/strong&gt; 是一种统计学上的方法。上面的分类分析更多是基于离散的数据进行的，而回归分析则是多用于连续的数据，用于预测发展的趋势，并且能得到相关的数字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cluster Analysis&lt;/strong&gt;
聚类分析&lt;/p&gt;
&lt;p&gt;聚类分析不同于分类分析，分类分析通常是基于一些已经被标记的数据而进行分析的。但是数据往往在一开始是没有任何分类标记的，这时，聚类分析就可以发挥作用。聚类分析的原则可以简单描述为：&lt;em&gt;最大化同类中的相似度，而最小化不同类的相似度&lt;/em&gt;。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ClarenceAu</dc:creator><pubDate>Sat, 16 Nov 2013 00:00:00 +0800</pubDate><guid>tag:www.clarenceau.me,2013-11-16:pages/2013/11/16/data-mining-introduction.html</guid><category>data mining</category></item><item><title>OSGi学习</title><link>http://www.clarenceau.me/pages/2013/10/19/osgi-learning.html</link><description>&lt;p&gt;做Java的同学，对于模块化一定不会陌生。而在Java领域中，关于模块化最有名的莫过于就是OSGi标准。&lt;/p&gt;
&lt;p&gt;很多刚开始学习，或者使用Java开发的同学可能觉得，Java不是已经有比较完善的包管理，以及可见性管理的机制了吗？为什么还需要专门定义一个这么难懂的模块化标准呢？这个问题，其实也困扰了我很久，并且也成为我学习OSGi的一个障碍。&lt;/p&gt;
&lt;p&gt;直到我真正开始在天猫工作，面对天猫如此复杂的业务系统的时候，我终于才发现，虽然Java已经有包管理的机制，但是Java对于真正模块化的支持，在复杂的业务面前，是如此之弱啊。所以，我又重新开始了学习OSGi之路。&lt;/p&gt;
&lt;h2&gt;为什么Java需要OSGi标准&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;过于低层代码的可见控制&lt;/li&gt;
&lt;li&gt;容易出错的类路径概念&lt;/li&gt;
&lt;li&gt;部署和管理支持上的不足&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;OSGi的分层架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;模块层   -- 代码的打包和共享&lt;/li&gt;
&lt;li&gt;生命周期层 -- 提供执行时模块管理和对底层OSGi框架的访问&lt;/li&gt;
&lt;li&gt;服务层 -- 模块内的组件间交互和通信&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ClarenceAu</dc:creator><pubDate>Sat, 19 Oct 2013 00:00:00 +0800</pubDate><guid>tag:www.clarenceau.me,2013-10-19:pages/2013/10/19/osgi-learning.html</guid><category>OSGi</category></item><item><title>框架代码就是异常处理</title><link>http://www.clarenceau.me/pages/2013/10/13/dealing-with-exception.html</link><description>&lt;p&gt;这周对系统的一个底层日志框架的代码进行了修改，老实说，这个日志框架总体来说，它的思想是很好的。但是由于框架中对于异常的处理没有使用恰当的方式，现在导致了整个日志框架可能会被下线。&lt;/p&gt;
&lt;p&gt;在跟老大一齐review了一些框架的代码之后，我们找到了几个明显的异常处理问题，我特此拿出来跟大家分享一下。&lt;/p&gt;
&lt;h3&gt;吃掉了业务异常&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 代码片段1：&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt; &lt;span class="n"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为日志框架都是通过AOP来实现的，所以像这段代码会在框架中多次被执行。其用途大概就是框架在获得了一些被执行的方法的信息之后，真正调用方法本身。&lt;/p&gt;
&lt;p&gt;然后考虑下面的场景：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 代码片段2：&lt;/span&gt;
&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Log&lt;/span&gt; &lt;span class="c1"&gt;// 表示本方法会本日志框架进行AOP，即会通过上面的代码片段1来进行实际的调用&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;biz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;// do something, maybe throw RuntimeException...&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;otherBiz&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Result&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Result&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;biz&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isSuccess&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;// do something...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在分布式的系统中，biz方法一旦有进行远程调用那么就会有可能抛出各种异常，例如：远程服务没找到，远程服务执行超时等。但是代码片段1中的代码把异常catch了，并且还返回了null，所以到biz的调用者那里也就是otherBiz方法中，在if语句的判断中就会抛出NPE异常。&lt;/p&gt;
&lt;p&gt;同时如果抛开代码片段1，抛开日志框架来看，就业务代码本身。任何人看到这里抛出了NPE都会觉得很诡异的。因为其实无论在调用方还是被调用方，result对象在没有异常的情况下，都是保证了非null的。这个时候，如果是一个不太了解系统的人，出现了这种NPE，那么一定会感到莫名其妙的。&lt;/p&gt;
&lt;p&gt;比较正确的处理方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// 代码片段3:&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Object&lt;/span&gt; &lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt; &lt;span class="n"&gt;instanceof&lt;/span&gt; &lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;joinPoint&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;proceed&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;RuntimeException&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;日志执行错误 AOP切点异常.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;随便调用e.printStackTrace()&lt;/h3&gt;
&lt;p&gt;很多人在刚学习Java的时候，都会很习惯地把捕捉到的异常进行e.printStackTrace()这个操作，这样可以方便地在控制台看到错误的输出。但是很多人并没有深究究竟这个方法背后是怎么样的呢？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printStackTrace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PrintStream&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;StackTraceElement&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getOurStackTrace&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;at &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

        &lt;span class="n"&gt;Throwable&lt;/span&gt; &lt;span class="n"&gt;ourCause&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getCause&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ourCause&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ourCause&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printStackTraceAsCause&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这段代码，就是在Throwable类中的，对于printStackTrace的具体实现。如果我们调用e.printStackTrace()，没有传入PrintStream对象的话，那么JDK就会帮我们传入System.err这个PrintStream这个在JVM中的全局对象。一旦你的程序由于依赖的某个远程服务出现异常，导致大量异常产生，那么，在访问量大，并发高的情况下，就会对这个System.err对象进行大量锁操作，严重影响系统性能。&lt;/p&gt;
&lt;p&gt;所以，一旦在框架中，直接使用e.printStackTrace()的话，一旦业务中出现了抛出大量异常的情况，就会导出大量的锁出现，严重降低了系统的性能。所以无论在正常的业务代码，还是框架的代码，都不能随便直接调用e.printStackTrace()这个方法，最好是应该通过日志框架，帮助我们把日志输出到问题。&lt;/p&gt;
&lt;p&gt;最后，老大跟我说了一句很有总结性的话，就是其实这些框架性的东西，逻辑上并不会太复杂，思路都是比较清晰的，但是框架最关键的就是要处理好上层业务的异常。&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">ClarenceAu</dc:creator><pubDate>Sun, 13 Oct 2013 00:00:00 +0800</pubDate><guid>tag:www.clarenceau.me,2013-10-13:pages/2013/10/13/dealing-with-exception.html</guid><category>coding practice</category></item></channel></rss>